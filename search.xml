<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>String</title>
    <url>/2020/10/05/String/</url>
    <content><![CDATA[<h1 id="在string中程序不会是别到用户输入的空格"><a href="#在string中程序不会是别到用户输入的空格" class="headerlink" title="在string中程序不会是别到用户输入的空格"></a>在string中程序不会是别到用户输入的空格</h1><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;please name this group of dogs.\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; name;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;the name is&quot;</span>&lt;&lt;name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>若是输入含有空格的字符</strong><br>例如: Mr. Jeremy<br><strong>则系统识别出来的将会是</strong><br>Mr.<br>因此需要拆分出两个名称进行组合<br>其中空格部分以<font color=red>“ “</font>表示</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//此处仅表示增加空格的案例，省略了其他必要字符</span></span><br><span class="line"><span class="built_in">string</span> the_dog_name,FirstName,SecendName;</span><br><span class="line">the_dog_name= SecondName + <span class="string">&quot; &quot;</span> +SecondNmame;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>避免将double类型于int类型混淆</p>
</blockquote>
<hr>
<p>#string类型<br><font color = red>string只能定义字符串</font></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stiring a,b,c;</span><br><span class="line">month = <span class="string">&quot;03&quot;</span>;</span><br><span class="line">day = <span class="string">&quot;04&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; month + day&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>其输出结果为0304</p>
<hr>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>变量</title>
    <url>/2020/10/05/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="如何显示出小数点后几位"><a href="#如何显示出小数点后几位" class="headerlink" title="如何显示出小数点后几位"></a>如何显示出小数点后几位</h1><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>.setf(ios::fixed);</span><br><span class="line"><span class="built_in">cout</span>.setf(ios::showpoint);</span><br><span class="line"><span class="built_in">cout</span>.precision(point);</span><br></pre></td></tr></table></figure>
<p>其中<font color = #FF6181>point</font><strong>可替换成数值(代表为小数点后几位)</strong><br> <strong>也可以用变量代替</strong></p>
<hr>
<p>#int类型及double</p>
<blockquote>
<p>例子<br>7，2均为int类型，然而<strong>当<font color =red>7/2/</font>时，其输出的数据类型属于double</strong><br>*<font color = blue>若要改为double值，需将7或2变为7.0或2.0</font>*<br>// 为何不将所有变量都以double来表示，而不是int，除了因为容器字节大小。<br><strong>使用%时系统会只获得运算结果的整数部分。系统不会判断四舍五入，而是直接舍弃小数点后部分，保留整数。</strong></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>小细节</title>
    <url>/2020/10/05/%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h1 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h1><a id="more"></a>
<blockquote>
<p>在设计问答或验证码时，要考虑到用户的大小写区分问题</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> item;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;hello\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Do you agree the agreement?\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; item;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">while</span> (item == <span class="string">&#x27;y&#x27;</span> || item == <span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">     <span class="comment">//此处为考虑大小写</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;good-bye\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>逻辑</title>
    <url>/2020/10/05/%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<h1 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h1><a id="more"></a>
<blockquote>
<p>使用布尔表达式，==表示相等 ，!=表示不等<br>“逻辑与” 操作符号为&amp;&amp;<br>“逻辑或”操作符号为｜｜<br><strong>在使用布尔表达式时，需用()将布尔表达式封闭起来</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (comparison1) &amp;&amp; (comparison2) )</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用**<font color =blue>!</font>**对任何布尔表达式进行求反</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(x&lt;y))</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">if</span> (x&gt;=y)</span><br><span class="line"><span class="comment">//其意思为x是否等于y</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>陷阱<br>不能使用</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x&gt;Y&gt;Z)</span><br><span class="line"><span class="comment">//能运行，但会产生错误</span></span><br><span class="line"><span class="keyword">if</span> ((x&gt;y) &amp;&amp; (y&gt;Z))</span><br><span class="line"><span class="comment">//正确用法    </span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>C++目录</title>
    <url>/2020/10/05/%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p><strong>目录</strong><br><a href="https://jeremy01.github.io/2020/10/05/%E9%80%BB%E8%BE%91/">变量</a><br><a href="https://jeremy01.github.io/2020/10/05/String/">String</a><br><a href="https://jeremy01.github.io/2020/10/05/%E9%80%BB%E8%BE%91/">逻辑</a><br><a href="https://jeremyjiao01.github.io/2020/10/05/%E5%B0%8F%E7%BB%86%E8%8A%82/">小细节</a><br><a href="https://jeremyjiao01.github.io/2020/10/09/%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/">布尔表达式</a><br><a href="https://jeremyjiao01.github.io/2020/10/09/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/">枚举类型</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>布尔表达式</title>
    <url>/2020/10/09/%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="不达尔表达式"><a href="#不达尔表达式" class="headerlink" title="不达尔表达式"></a>不达尔表达式</h2><a id="more"></a>
<p>在使用不达尔表达式时，若不是用括号，其表达出的顺序将是:<br>1.执行 <strong>!</strong><br>2.对 <strong>&lt;</strong> 之类的关系操作符号进行求值<br>3.对 <strong>&amp;&amp;</strong> 进行求值<br>4.再对 <strong>||</strong> 进行求值<br>因此为了保持良好的编程习惯</p>
<blockquote>
<p>尽量避免使用!</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> (temperature &gt; <span class="number">90</span>) &amp;&amp; (humidity &gt; <span class="number">0.90</span>) &amp;&amp; (number == integer)</span><br><span class="line"><span class="comment">//由于关系运算&gt;和==先于&amp;&amp;进行求值，所以可以省略上述表达式中的圆括号</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h1><blockquote>
<p>短路求值<br>当存在 &amp;&amp; 和 || 时<br>系统会优先对左半边的数值进行求值</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(x &gt;= <span class="number">0</span>) &amp;&amp; (y &gt; <span class="number">1</span>)</span><br><span class="line"><span class="comment">//此时若x&lt;0，则系统直接判定为 flase 不需要在对右半边部分进行运算</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>枚举类型</title>
    <url>/2020/10/09/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><a id="more"></a>
<p>枚举类型是指用一组int类型定义的常量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> animals &#123; dog, cat, pig &#125;</span><br><span class="line"><span class="comment">//若不指定每一组的特定数值，则系统会自动分配</span></span><br><span class="line"><span class="keyword">enum</span> animals &#123; dog=<span class="number">0</span>, cat=<span class="number">1</span>, pig=<span class="number">2</span> &#125;</span><br><span class="line"><span class="comment">//如果只将部分枚举常量初始化成特定的值</span></span><br><span class="line"><span class="keyword">enum</span> animals &#123; dog = <span class="number">17</span>, cat, pig = <span class="number">-3</span>  &#125;</span><br><span class="line"><span class="comment">//则 dog为17 cat为18 pig为-3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>强枚举或枚举类<br>不希望枚举具有整数的行为。<br>只需在enum后加入class，然后在枚举名称后添加两个冒号来限定枚举值</p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
</search>
